{"version":3,"sources":["../rxjs_函数式编程.js"],"names":["a","b","c","add","mul","sub","a1","add5","console","log"],"mappings":";;AAAA;;AAEA;;AAEA;;AAEA,IAAIA,IAAI,IAAI,CAAZ;AACA,IAAIC,IAAI,IAAI,CAAZ;AACA,IAAIC,IAAIF,IAAIC,CAAZ;;AAEA;;AAEA,IAAME,MAAM,SAANA,GAAM,CAACH,CAAD,EAAIC,CAAJ;AAAA,SAAUD,IAAIC,CAAd;AAAA,CAAZ;AACA,IAAMG,MAAM,SAANA,GAAM,CAACJ,CAAD,EAAIC,CAAJ;AAAA,SAAUD,IAAIC,CAAd;AAAA,CAAZ;AACA,IAAMI,MAAM,SAANA,GAAM,CAACL,CAAD,EAAGC,CAAH;AAAA,SAASD,IAAIC,CAAb;AAAA,CAAZ;AACAI,IAAIF,IAAI,CAAJ,EAAM,CAAN,CAAJ,EAAcC,IAAI,CAAJ,EAAM,CAAN,CAAd;;AAGA;AACA;;AAEA;;AAEA,IAAME,KAAK,SAALA,EAAK,CAACN,CAAD;AAAA,SAAO,UAACC,CAAD;AAAA,WAAOD,IAAGC,CAAV;AAAA,GAAP;AAAA,CAAX;;AAEA,IAAMM,OAAOD,GAAG,CAAH,CAAb;;AAEAE,QAAQC,GAAR,CAAYF,KAAK,EAAL,CAAZ,E,CAAuB","file":"rxjs_函数式编程.js","sourcesContent":["// 函数式编程是一种编程范式\n\n// 它属于 \"结构化编程\" 的一种，主要思想是把运算过程尽量写成一系列嵌套的函数调用\n\n// 传统的过程式编程如下：\n\nlet a = 5 + 6;\nlet b = 1 * 3;\nlet c = a - b;\n\n// 函数式编程如下：\n\nconst add = (a, b) => a + b;\nconst mul = (a, b) => a * b;\nconst sub = (a,b) => a - b;\nsub(add(5,6), mul(1,3));\n\n\n// 函数式编程基础条件：函数为一等公民 (First Class)\n// 所谓 \"一等公民\"（first class），指的是函数与其他数据类型一样，处于平等地位，可以赋值给其他变量，也可以作为参数，传入另一个函数，或者作为其它函数的返回值。\n\n// 例如作为返回值：\n\nconst a1 = (a) => (b) => a+ b;\n\nconst add5 = a1(5);\n\nconsole.log(add5(10)); // 15\n"]}