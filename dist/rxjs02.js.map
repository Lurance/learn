{"version":3,"sources":["../rxjs02.js"],"names":["Rx","require","source1","Observable","of","subscribe","console","log","value","ary","source2","from","source3","fromPromise","Promise","resolve","reject","setTimeout","source4","throw","error","err","source5","interval","subscription5","source6","timer","source7","unsubscribe"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMA,KAAKC,QAAQ,MAAR,CAAX;;AAEA,IAAIC,UAAUF,GAAGG,UAAH,CAAcC,EAAd,CAAiB,SAAjB,EAA4B,IAA5B,CAAd;;AAEAF,QACKG,SADL,CACe;AAAA,WAASC,QAAQC,GAAR,CAAYC,KAAZ,CAAT;AAAA,CADf;;AAGA;AACA;;;AAGA,IAAIC,MAAM,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAV;AACA,IAAIC,UAAUV,GAAGG,UAAH,CAAcQ,IAAd,CAAmBF,GAAnB,CAAd;AACAC,QACKL,SADL,CACe;AAAA,WAASC,QAAQC,GAAR,CAAYC,KAAZ,CAAT;AAAA,CADf;;AAGA;AACA;AACA;AACA;;;AAGA;;AAEA;;;AAGA;;AAEA,IAAII,UAAUZ,GAAGG,UAAH,CAAcU,WAAd,CAA0B,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACrEC,eAAW,YAAM;AACbF,gBAAQ,aAAR;AACH,KAFD,EAEG,IAFH;AAGH,CAJuC,CAA1B,CAAd;;AAMAH,QACKP,SADL,CACe;AAAA,WAASC,QAAQC,GAAR,CAAYC,KAAZ,CAAT;AAAA,CADf;;AAGA;;;AAGA;AACA;AACA;;AAEA,IAAIU,UAAUlB,GAAGG,UAAH,CAAcgB,KAAd,CAAoB,MAApB,CAAd;;AAEAD,QACKb,SADL,CAEQ,iBAAS,CACR,CAHT,EAIQ;AAAA,WAAOC,QAAQc,KAAR,CAAcC,GAAd,CAAP;AAAA,CAJR,EAKQ;AAAA,WAAMf,QAAQC,GAAR,CAAY,gBAAZ,CAAN;AAAA,CALR,CAK4C;AAL5C;AAOA;;;AAGA;;AAEA,IAAIe,UAAUtB,GAAGG,UAAH,CAAcoB,QAAd,CAAuB,GAAvB,CAAd;;AAEA,IAAMC,gBAAgBF,QACjBjB,SADiB,CACP;AAAA,WAASC,QAAQC,GAAR,CAAYC,KAAZ,CAAT;AAAA,CADO,CAAtB;AAEA;;;AAGA;;AAEA,IAAIiB,UAAUzB,GAAGG,UAAH,CAAcuB,KAAd,CAAoB,IAApB,EAA0B,IAA1B,CAAd;AACAD,QACKpB,SADL,CACe;AAAA,WAASC,QAAQC,GAAR,eAAwBC,KAAxB,CAAT;AAAA,CADf;;AAGA,IAAImB,UAAU3B,GAAGG,UAAH,CAAcuB,KAAd,CAAoB,IAApB,CAAd;AACAC,QACKtB,SADL,CAEQ;AAAA,WAASC,QAAQC,GAAR,eAAwBC,KAAxB,CAAT;AAAA,CAFR,EAGQ,eAAO,CAAE,CAHjB,EAIQ;AAAA,WAAOF,QAAQC,GAAR,CAAY,kBAAZ,CAAP;AAAA,CAJR;;AAOA;AACA;;;AAGA;;AAEAU,WAAW,YAAM;AACbO,kBAAcI,WAAd;AACH,CAFD,EAEG,IAFH;;AAKA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"rxjs02.js","sourcesContent":["// Observable - Creation Operato\n// RxJS 中提供了很多操作符，用于创建 Observable 对象，常用的操作符如下：\n//\n// create\n// of\n// from\n// fromEvent\n// fromPromise\n// empty\n// never\n// throw\n// interval\n// timer\n\nconst Rx = require('rxjs');\n\nlet source1 = Rx.Observable.of('lurance', 'he');\n\nsource1\n    .subscribe(value => console.log(value));\n\n// lurance\n// he\n\n\nlet ary = [1, 2, 3, 4];\nlet source2 = Rx.Observable.from(ary);\nsource2\n    .subscribe(value => console.log(value));\n\n// 1\n// 2\n// 3\n// 4\n\n\n// fromEvent\n\n// Rx.Observable.fromEvent(document.querySelector('button'), 'click');\n\n\n// fromPromise\n\nlet source3 = Rx.Observable.fromPromise(new Promise((resolve, reject) => {\n    setTimeout(() => {\n        resolve('Hello RxJS!');\n    }, 3000)\n}));\n\nsource3\n    .subscribe(value => console.log(value));\n\n// Hello RxJS!\n\n\n// empty 操作符返回一个空的 Observable 对象，如果我们订阅该对象，它会立即返回 complete 信息\n// never 操作符会返回一个无穷的 Observable，当我们订阅它后，什么事情都不会发生，它是一个一直存在却什么都不做的 Observable 对象。\n// throw 操作操作符，只做一件事就是抛出异常。\n\nlet source4 = Rx.Observable.throw('Oop!');\n\nsource4\n    .subscribe(\n        value => {\n        },\n        err => console.error(err),\n        () => console.log('Throw Complete') // 不会执行\n    );\n// Oops!\n\n\n// interval 操作符支持一个数值类型的参数，用于表示定时的间隔。\n\nlet source5 = Rx.Observable.interval(500);\n\nconst subscription5 = source5\n    .subscribe(value => console.log(value));\n// 每隔 0.5s，会输出一个递增的值，初始值从 0 开始\n\n\n// timer 操作符支持两个参数，第一个参数用于设定发送第一个值需等待的时间，第二个参数表示第一次发送后，发送其它值的间隔时间。此外，timer 操作符也可以只传递一个参数\n\nlet source6 = Rx.Observable.timer(1000, 2000);\nsource6\n    .subscribe(value => console.log(`source6: ${value}`));\n\nlet source7 = Rx.Observable.timer(1000);\nsource7\n    .subscribe(\n        value => console.log(`source7: ${value}`),\n        err => {},\n        ()  => console.log('source7 Complete'),\n    );\n\n// 0\n// complete!\n\n\n// 有些时候对于一些 Observable 对象 (如通过 interval、timer 操作符创建的对象)，当我们不需要的时候，要释放相关的资源，以避免资源浪费。针对这种情况，我们可以调用 Subscription 对象的 unsubscribe 方法来释放资源\n\nsetTimeout(() => {\n    subscription5.unsubscribe()\n}, 2000);\n\n\n// Pull 和 Push 是数据生产者和数据的消费者两种不同的交流方式。\n\n// Pull\n// 在 \"拉\" 体系中，数据的消费者决定何时从数据生产者那里获取数据，而生产者自身并不会意识到什么时候数据将会被发送给消费者。\n// 每一个 JavaScript 函数都是一个 \"拉\" 体系，函数是数据的生产者，调用函数的代码通过 ''拉出\" 一个单一的返回值来消费该数据。\n\n// Push\n// 在 \"推\" 体系中，数据的生产者决定何时发送数据给消费者，消费者不会在接收数据之前意识到它将要接收这个数据。\n// Promise(承诺) 是当今 JS 中最常见的 \"推\" 体系，一个Promise (数据的生产者)发送一个 resolved value (成功状态的值)来执行一个回调(数据消费者)，但是不同于函数的地方的是：Promise 决定着何时数据才被推送至这个回调函数。\n// RxJS 引入了 Observables (可观察对象)，一个全新的 \"推\" 体系。一个可观察对象是一个产生多值的生产者，当产生新数据的时候，会主动 \"推送给\" Observer (观察者)。\n\n\n"]}