{"version":3,"sources":["../async_await_pro.js"],"names":["Api","user","id","name","friends","photo","Promise","resolve","reject","setTimeout","userId","slice","Error","callbackHell","api","timeStart","Date","getTime","getUser","then","returnedUser","getFriends","returnedFriends","getPhoto","timeEnd","console","log","promiseChain","asyncAwaitIsYourNewBestFriend","promiseLoops","ap","getFriendsOfFriends","length","friend","pop","moreFriends","asyncAwaitLoops","asyncAwaitLoopsParallel","friendPromises","map","all"],"mappings":"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","file":"async_await_pro.js","sourcesContent":["// https://juejin.im/post/5a6c1db1518825733a30efbf\n\n// async/await 是一种允许我们像构建没有回调函数的普通函数一样构建promises的新语法（从 .net和c#借鉴而来）。\n// 这个是一个极好的JavaScript的增加功能，在去年被加进了JavaScript ES7,它甚至可以用来简化几乎所有现存的js应用。\n\n// 我们就将会使用这个虚拟的API Class。这个类通过返回promise对象来模拟网络的调用的过程\n// 并且这些promise对象将会在被调用的200ms之后使用resolve函数将简单的数据作为参数传递出去。\n\nclass Api {\n    constructor() {\n        this.user = {id: 1, name: 'test'}\n        this.friends = [this.user, this.user, this.user]\n        this.photo = 'not a real photo'\n    }\n\n    getUser() {\n        return new Promise((resolve, reject) => {\n            setTimeout(() => resolve(this.user), 300)\n        })\n    }\n\n    getFriends(userId) {\n        return new Promise((resolve, reject) => {\n            setTimeout(() => resolve(this.friends.slice()), 300)\n        })\n    }\n\n    getPhoto(userId) {\n        return new Promise((resolve, reject) => {\n            setTimeout(() => resolve(this.photo), 300)\n        })\n    }\n\n    throwError() {\n        return new Promise((resolve, reject) => {\n            setTimeout(() => reject(new Error('Intentional Error')), 400)\n        })\n    }\n}\n\n// 每个例子将会按顺序执行相同的三个操作：检索一个用户，检索他们的朋友，以及检索他们的照片。最后，我们将在控制台输出上述的三个结果。\n\n\n// 第一个尝试-嵌套的promise回调函数\n\nfunction callbackHell() {\n    const api = new Api();\n    let user, friends;\n    const timeStart = new Date().getTime();\n    api.getUser()\n        .then(function (returnedUser) {\n            user = returnedUser;\n            api.getFriends(user.id)\n                .then(function (returnedFriends) {\n                    friends = returnedFriends;\n                    api.getPhoto(user.id)\n                        .then(function (photo) {\n                            const timeEnd = (new Date()).getTime();\n                            console.log('callbackHell', {user, friends, photo}, `run time: ${timeEnd - timeStart}`)\n                        })\n                })\n        })\n}\n\n\n\n\n// 第二个尝试 - 链式promise\n\nfunction promiseChain() {\n    const api = new Api();\n    let user, friends;\n    const timeStart = new Date().getTime();\n    api.getUser()\n        .then((returnedUser) => {\n            user = returnedUser;\n            return api.getFriends(user.id)\n        })\n        .then((returnedFriends) => {\n            friends = returnedFriends;\n            return api.getPhoto(user.id)\n        })\n        .then((photo) => {\n            const timeEnd = (new Date()).getTime();\n            console.log('promiseChain', { user, friends, photo }, `run time: ${timeEnd - timeStart}`)\n        })\n}\n\n// promise的一个很好的特性就是他们能够通过在每个回调内部返回另外一个promise对象而进行链式操作。\n// 这个方法可以将所有的回调视作为平级的。此外，我们还可以使用箭头函数来缩写回调的表达式。\n\n\n\n\n// 第三个尝试 Async/Await\n\nasync function asyncAwaitIsYourNewBestFriend() {\n    const api = new Api();\n    const timeStart = new Date().getTime();\n    const user = await api.getUser();\n    const friends = await api.getFriends(user.id);\n    const photo = await api.getPhoto(user.id);\n    const timeEnd = (new Date()).getTime();\n    console.log('asyncAwaitIsYourNewBestFriend', { user, friends, photo }, `run time: ${timeEnd - timeStart}`)\n}\n\n\n\n// \\在promise之前调用await暂停了函数流直到promise 处于resolved状态，然后将结果赋值给等号左边的变量。\n// 这个方式能让我们编写一个就像是一个正常的同步命令一样的异步操作流程。\n\n// 注意“async”关键词是在整个函数声明的开始声明的。我们必须要这么做，因为其实它将整个函数转化成为一个promise。我们将会在稍后研究它。\n\n\n\n\n\n\n// Async/await让以前的十分复杂的操作变得特别简单， 假如我们想按顺序取回每个用户的朋友列表该怎么办？\n\n// 第一个尝试 - 递归的promise循环\n\nfunction promiseLoops() {\n    const api = new Api();\n    ap.getUser()\n        .then(user => {\n            return api.getFriends(user.id)\n        })\n        .then(returnedFriends => {\n            const getFriendsOfFriends = (friends) => {\n                if (friends.length > 0) {\n                    let friend = friends.pop();\n                    return api.getFriends(friend.id)\n                        .then(moreFriends => {\n                            console.log('promiseLoops', moreFriends);\n                            return getFriendsOfFriends(friends)\n                        })\n                }\n            };\n            return getFriendsOfFriends(returnedFriends)\n        })\n}\n\n\n\n// 第二次尝试- Async/Await的for循环\n\nasync function asyncAwaitLoops() {\n    const api = new Api();\n    const user = await api.getUser();\n    const friends = await api.getFriends(user.id);\n\n    for (let friend of friends) {\n        let moreFriends = await api.getFriends(friend.id);\n        console.log('asyncAwaitLoops', moreFriends)\n    }\n}\n\n\n\n\n// PARALLEL OPERATIONS（并行操作）\n// 逐个获取每个朋友列表似乎有点慢，为什么不采取并行执行呢？我们可以使用async/await 来实现这个需求吗？\n\nasync function asyncAwaitLoopsParallel() {\n    const api =new Api();\n    const user = await api.getUser();\n    const friends = await api.getFriends(user.id);\n    const friendPromises = friends.map(friend => api.getFriends(friend.id));\n    const moreFriends = await Promise.all(friendPromises);\n    console.log('asyncAwaitLoopsParallel', moreFriends)\n}\n\n\n// 为了并行的运行这些操作，要先生成成运行的promise数组，并把它作为一个参数传给Promise.all()。\n// 它返回给我们一个唯一的promise对象可以让我们进行await， 这个promise对象一旦所有的操作都完成了就将会变成resolved状态。\n\nasyncAwaitLoopsParallel()\n"]}